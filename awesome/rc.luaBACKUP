--[[

     Awesome WM configuration template
     github.com/Vhern/ConfigLinux

--]]

-- {{{ Required libraries
local awesome, client, mouse, screen, tag = awesome, client, mouse, screen, tag
local ipairs, string, os, table, tostring, tonumber, type = ipairs, string, os, table, tostring, tonumber, type

local gears         = require("gears")
local awful         = require("awful")
                      require("awful.autofocus")
local wibox         = require("wibox")
local beautiful     = require("beautiful")
local naughty       = require("naughty")
local lain          = require("lain")
local freedesktop   = require("freedesktop")
local hotkeys_popup = require("awful.hotkeys_popup").widget
                      require("awful.hotkeys_popup.keys")
local my_table      = awful.util.table or gears.table -- 4.{0,1} compatibility
local dpi           = require("beautiful.xresources").apply_dpi
-- }}}

-- {{{ Error handling
-- Check if awesome encountered an error during startup and fell back to
-- another config (This code will only ever execute for the fallback config)
if awesome.startup_errors then
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Oops, there were errors during startup!",
                     text = awesome.startup_errors })
end

-- Handle runtime errors after startup
do
    local in_error = false
    awesome.connect_signal("debug::error", function (err)
        if in_error then return end
        in_error = true

        naughty.notify({ preset = naughty.config.presets.critical,
                         title = "Oops, an error happened!",
                         text = tostring(err) })
        in_error = false
    end)
end
-- }}}

-- {{{ Autostart windowless processes

-- This function will run once every time Awesome is started
local function run_once(cmd_arr)
    for _, cmd in ipairs(cmd_arr) do
        awful.spawn.with_shell("pgrep -u $USER -fx '" .. cmd .. "' > /dev/null || (" .. cmd .. ")")
    end
end

-- Autostart apps
run_once({
--"picom",
"lxsession",
"numlockx on", 
"unclutter -root",
"nitrogen --restore"
})

local themes = {
    "blackburn",       -- 1
    "copland",         -- 2
    "dremora",         -- 3
    "holo",            -- 4
    "multicolor",      -- 5
    "powerarrow",      -- 6
    "powerarrow-dark", -- 7
    "rainbow",         -- 8
    "steamburn",       -- 9
    "vertex",          -- 10
    "vhern",           -- 11
}

local chosen_theme  = themes[11]
local modkey        = "Mod4"
local altkey        = "Mod1"
local terminal      = "alacritty"
local vi_focus      = false -- vi-like client focus - https://github.com/lcpz/awesome-copycats/issues/275
local editor        = os.getenv("EDITOR") or "vim"
local gui_editor    = os.getenv("GUI_EDITOR") or "code"
local browser       = os.getenv("BROWSER") or "google-chrome-stable"
local mini_browser  = "qutebrowser"
local calculator    = os.getenv("CALCULATOR") or "qalculate-gtk"
local file_explorer = os.getenv("FILE_EXPLORER") or "nemo"
local gui_sudo      = "kdesu"
local run           = "rofi"
--local run           = "dmenu_run"


----- Custom Software -----

local AndroidStudio = "/usr/local/android-studio/bin/studio.sh"
local UnigineHeaven = "home/vhern/Downloads/Unigine_Heaven-4.0/heaven"
local Blender = "/home/vhern/Downloads/blender-2.82a-linux64/blender"
local TS = "/home/vhern/Downloads/TeamSpeak3-Client-linux_amd64/ts3client_runscript.sh"

----------------------------


awful.util.terminal = terminal
awful.util.tagnames = { "1", "2", "3", "4", "5" }
awful.layout.layouts = awful.layout.suit.corner.ne

awful.util.taglist_buttons = my_table.join(
    awful.button({ }, 1, function(t) t:view_only() end),
    awful.button({ modkey }, 1, function(t)
        if client.focus then
            client.focus:move_to_tag(t)
        end
    end),
    awful.button({ }, 3, awful.tag.viewtoggle),
    awful.button({ modkey }, 3, function(t)
        if client.focus then
            client.focus:toggle_tag(t)
        end
    end)
)

awful.util.tasklist_buttons = my_table.join(
    awful.button({ }, 1, function (c)
        if c == client.focus then
            c.minimized = true
        else
            --c:emit_signal("request::activate", "tasklist", {raise = true})<Paste>

            -- Without this, the following
            -- :isvisible() makes no sense
            c.minimized = false
            if not c:isvisible() and c.first_tag then
                c.first_tag:view_only()
            end
            -- This will also un-minimize
            -- the client, if needed
            client.focus = c
            c:raise()
        end
    end),
    awful.button({ }, 2, function (c) c:kill() end),
    awful.button({ }, 3, function ()
        local instance = nil

        return function ()
            if instance and instance.wibox.visible then
                instance:hide()
                instance = nil
            else
                instance = awful.menu.clients({theme = {width = dpi(250)}})
            end
        end
    end)
)

local theme_path = os.getenv("HOME") .. "/.config/awesome/themes/" .. chosen_theme .. "/theme.lua"
beautiful.init(theme_path)

-- {{{ Menu
local myAwesomeMenu = {
    { "Open Terminal", terminal },
    { "Hotkeys", function() return false, hotkeys_popup.show_help end },
    { "Manual", terminal .. " -e man awesome" },
    { "Edit Config", terminal .. " -e " .. gui_editor .. " " .. awesome.conffile },
    { "Edit Theme", terminal .. " -e " .. gui_editor .. " " .. theme_path },
    { "Restart", awesome.restart },
    { "Quit", function() awesome.quit() end }
}

local myCustomMenu = {
    { "Android Studio", AndroidStudio, beautiful.android_studio },
    { "Unigine Heaven", UnigineHeaven, beautiful.unigine_heaven },
    { "Blender", Blender, beautiful.blender },
    { "Team Speak", TS, beautiful.blender },
    { "Dukto", "dukto", beautiful.blender },
    { "Prime95", "mprime", beautiful.blender },
    { "Unigine Heaven", "unigine-heaven", beautiful.blender },
}

awful.util.mymainmenu = freedesktop.menu.build({
    icon_size = beautiful.menu_height or dpi(16),
    before = {
        { "Awesome", myAwesomeMenu, beautiful.awesome_icon },
        -- other triads can be put here
    },
    after = {
        { "Others", myCustomMenu, beautiful.awesome_icon },
        -- other triads can be put here
    }
})
-- hide menu when mouse leaves it
--awful.util.mymainmenu.wibox:connect_signal("mouse::leave", function() awful.util.mymainmenu:hide() end)

-- No borders when rearranging only 1 non-floating or maximized client // TODO: gap only with multiples windows
screen.connect_signal("arrange", function (s)
    local only_one = #s.tiled_clients == 1
    for _, c in pairs(s.clients) do
        if only_one and not c.floating or c.maximized then
            c.border_width = 0
        else
            c.border_width = beautiful.border_width
        end
    end
end)

-- Create a wibox for each screen and add it
awful.screen.connect_for_each_screen(function(s) beautiful.at_screen_connect(s) end)
-- }}}

-- {{{ Mouse bindings
root.buttons(my_table.join(
    awful.button({ }, 3, function () awful.util.mymainmenu:toggle() end)
))
-- }}}

-- {{{ Key bindings
globalkeys = my_table.join(

    -- Awesome Hotkeys
    awful.key({ modkey, "Control" }, "r", awesome.restart,
        {description = "reload awesome", group = "Awesome"}),
    awful.key({ modkey, "Control" }, "q", awesome.quit,
        {description = "quit awesome", group = "Awesome"}),
    awful.key({ modkey }, "s", hotkeys_popup.show_help,
        {description = "show help", group = "Awesome"}),

    awful.key({ modkey, "Control" }, "c", function () os.execute(terminal .. " -e " .. gui_editor .. " " .. awesome.conffile) end,
        {description = "Edit Config", group = "Awesome"}),
    awful.key({ modkey, "Control" }, "t", function () os.execute(terminal .. " -e " .. gui_editor .. " " .. theme_path) end,
        {description = "Edit Theme", group = "Awesome"}),

    -- User programs
    awful.key({ modkey }, "Return", function () awful.spawn(terminal) end,
        {description = "open a terminal", group = "Launcher"}),
    awful.key({ modkey }, "b", function () awful.spawn(browser) end,
        {description = "run browser", group = "Launcher"}),
    awful.key({ modkey }, "g", function () awful.spawn(mini_browser) end,
        {description = "run mini browser", group = "Launcher"}),
    awful.key({ modkey }, "v", function () awful.spawn(gui_editor) end,
        {description = "run gui editor", group = "Launcher"}),
    awful.key({ modkey }, "c", function () awful.spawn(calculator) end,
        {description = "run calculator", group = "Launcher"}),
    awful.key({ modkey }, "e", function () awful.spawn(file_explorer) end,
        {description = "run file explorer", group = "Launcher"}),
    awful.key({ modkey }, "t", function () awful.spawn(TS) end,
        {description = "run team speak", group = "Launcher"}),

    -- Rofi run
    awful.key({ modkey }, "space", function () os.execute(run .. " -show run") end,
        {description = "show dmenu", group = "Launcher"}),

    -- Rofi window
    awful.key({ altkey }, "Tab", function () os.execute(run .. " -show window") end,
        {description = "show rofi", group = "Launcher"}),

    -- By direction client focus
    awful.key({ modkey }, "Down",
        function()
            awful.client.focus.global_bydirection("down")
            if client.focus then client.focus:raise() end
        end,
        {description = "focus down", group = "Client"}),
    awful.key({ modkey }, "Up",
        function()
            awful.client.focus.global_bydirection("up")
            if client.focus then client.focus:raise() end
        end,
        {description = "focus up", group = "Client"}),
    awful.key({ modkey }, "Left",
        function()
            awful.client.focus.global_bydirection("left")
            if client.focus then client.focus:raise() end
        end,
        {description = "focus left", group = "Client"}),
    awful.key({ modkey }, "Right",
        function()
            awful.client.focus.global_bydirection("right")
            if client.focus then client.focus:raise() end
        end,
        {description = "focus right", group = "Client"}),

    -- By direction client swap
    awful.key({ modkey, "Control" }, "Down",
        function()
            awful.client.swap.global_bydirection("down")
            if client.swap then client.swap:raise() end
        end,
        {description = "swap down", group = "Client"}),
    awful.key({ modkey, "Control" }, "Up",
        function()
            awful.client.swap.global_bydirection("up")
            if client.swap then client.swap:raise() end
        end,
        {description = "swap up", group = "Client"}),
    awful.key({ modkey, "Control" }, "Left",
        function()
            awful.client.swap.global_bydirection("left")
            if client.swap then client.swap:raise() end
        end,
        {description = "swap left", group = "Client"}),
    awful.key({ modkey, "Control" }, "Right",
        function()
            awful.client.swap.global_bydirection("right")
            if client.swap then client.swap:raise() end
        end,
        {description = "swap right", group = "Client"}),

    -- Size Mod
    awful.key({ modkey, altkey }, "Up",     function () awful.tag.incmwfact(0.05)          end,
        {description = "increase master width factor", group = "Layout"}),
    awful.key({ modkey, altkey }, "Down",     function () awful.tag.incmwfact(-0.05)          end,
        {description = "decrease master width factor", group = "Layout"}),

    -- Increment Columns Number
    awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol(1, nil, true)    end,
        {description = "increase the number of columns", group = "Layout"}),
    awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1, nil, true)    end,
        {description = "decrease the number of columns", group = "Layout"}),

    -- Dynamic tagging
    awful.key({ modkey, "Shift" }, "Left", function () lain.util.move_tag(-1) end,
        {description = "move tag to the left", group = "Tag"}),
    awful.key({ modkey, "Shift" }, "Right", function () lain.util.move_tag(1) end,
        {description = "move tag to the right", group = "Tag"})
)

clientkeys = my_table.join(
    
    awful.key({ modkey }, "f", 
        function (c)
            c.fullscreen = not c.fullscreen
            c:raise()
        end,
        {description = "toggle fullscreen", group = "Client"}),

    awful.key({ "Control" }, "q", function (c) c:kill() end,
        {description = "close", group = "Client"}),

    awful.key({ "Control" }, "e", function (c) c.minimized = true end,
        {description = "minimize", group = "Client"})
)

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it works on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
for i = 1, 9 do
    -- Hack to only show tags 1 and 9 in the shortcut window (mod+s)
    local descr_view, descr_toggle, descr_move, descr_toggle_focus
    if i == 1 or i == 9 then
        descr_view = {description = "view tag #", group = "Tag"}
        descr_toggle = {description = "toggle tag #", group = "Tag"}
        descr_move = {description = "move focused client to tag #", group = "Tag"}
        descr_toggle_focus = {description = "toggle focused client on tag #", group = "Tag"}
    end
    globalkeys = my_table.join(globalkeys,
        -- View tag only.
        awful.key({ modkey }, "#" .. i + 9,
                  function ()
                        local screen = awful.screen.focused()
                        local tag = screen.tags[i]
                        if tag then
                           tag:view_only()
                        end
                  end,
                  descr_view),
        -- Toggle tag display.
        awful.key({ modkey, "Control" }, "#" .. i + 9,
                  function ()
                      local screen = awful.screen.focused()
                      local tag = screen.tags[i]
                      if tag then
                         awful.tag.viewtoggle(tag)
                      end
                  end,
                  descr_toggle),
        -- Move client to tag.
        awful.key({ modkey, "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus then
                          local tag = client.focus.screen.tags[i]
                          if tag then
                              client.focus:move_to_tag(tag)
                          end
                     end
                  end,
                  descr_move),
        -- Toggle tag on focused client.
        awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus then
                          local tag = client.focus.screen.tags[i]
                          if tag then
                              client.focus:toggle_tag(tag)
                          end
                      end
                  end,
                  descr_toggle_focus)
    )
end

clientbuttons = gears.table.join(
    awful.button({ }, 1, function (c)
        c:emit_signal("request::activate", "mouse_click", {raise = true})
    end),
    awful.button({ modkey }, 1, function (c)
        c:emit_signal("request::activate", "mouse_click", {raise = true})
        awful.mouse.client.move(c)
    end),
    awful.button({ modkey }, 3, function (c)
        c:emit_signal("request::activate", "mouse_click", {raise = true})
        awful.mouse.client.resize(c)
    end)
)

-- Set keys
root.keys(globalkeys)
-- }}}

-- {{{ Rules
-- Rules to apply to new clients (through the "manage" signal).
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = awful.client.focus.filter,
                     raise = true,
                     keys = clientkeys,
                     buttons = clientbuttons,
                     screen = awful.screen.preferred,
                     --placement = awful.placement.centered,
                     size_hints_honor = false
     }
    },

    -- Set Firefox to always map on the first tag on screen 1.
    --{ rule = { class = "Firefox" },
    --  properties = { screen = 1, tag = awful.util.tagnames[1] } },

    --{ rule = { class = "Gimp", role = "gimp-image-window" },
    --      properties = { maximized = true } },


    --{ rule = { role = { "pop-up" } }, properties = { floating = true }},
      
    { rule = { floating = true },
        properties = { ontop = true, placement = awful.placement.centered } },

    { rule_any = { 
    name = { 
        "Qalculate!",
        "Free Download Manager", 
        "Android Emulator - Pixel_3_XL_API_30:5554" },
    class = { 
        mini_browser, } },
        properties = { ontop = true, floating = true, placement = awful.placement.centered } },
}
-- }}}

-- Enable sloppy focus, so that focus follows mouse.
client.connect_signal("mouse::enter", function(c)
    c:emit_signal("request::activate", "mouse_enter", {raise = vi_focus})
end)

client.connect_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.connect_signal("unfocus", function(c) 
    c.border_color = beautiful.border_normal

    -- Temporal Apps
    if c.name == "Qalculate!" or
        c.name == "Free Download Manager" then
        c:kill()
    end
end)
-- }}}